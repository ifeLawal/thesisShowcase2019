{"version":3,"sources":["StudentProfiles.csv","animalPage.js","projectMap.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Animalpage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","home","aboutProject","aboutPerson","coverImg","firstName","Github","Insta","lastName","Linkedin","Medium","Tags","Portfolio","projectLink","projectEmbed","projectImage","projectImage2","projectImage3","projectTitle","SecondAdvisor","ThesisAdvisor","ClassAdvisor","Twitter","links","updateData","bind","assertThisInitialized","categoryList","aboutSplit","listLink","homePage","setState","csvFilePath","require","parse","header","download","skipEmptyLines","complete","result","data","promrojectImage3","secondAdvisor","thesisAdvisor","classAdvisor","link","text","console","log","src","i","react_default","a","createElement","key","words","href","id","alt","className","split","map","ProjectLink","projectImag3","title","frameBorder","allow","allowFullScreen","renderProjectMap","renderAnimal","Component","Boolean","window","location","hostname","match","ReactDOM","render","animalPage","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43c47825.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/StudentProfiles.b078ca74.csv\";","import React, { Component } from 'react';\n// import { CSVLink, CSVDownoad } from 'react-csv';\n// import profiles from './StudentProfiles.csv'\n\n\n\nclass Animalpage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      home: true,\n      aboutProject: \"\",\n      aboutPerson: \"\",\n      coverImg: \"\",\n      firstName: \"\",\n      Github: \"\",\n      Insta: \"\",\n      lastName: \"\",\n      Linkedin: \"\",\n      Medium: \"\",\n      Tags: \"\",\n      Portfolio: \"\",\n      projectLink: \"\",\n      projectEmbed: \"\",\n      projectImage: \"\",\n      projectImage2: \"\",\n      projectImage3: \"\",\n      projectTitle: \"\",\n      SecondAdvisor: \"\",\n      ThesisAdvisor: \"\",\n      ClassAdvisor: \"\",\n      Twitter: \"\",\n      links: [\n        {\n\n        }\n      ]\n    }\n    this.updateData = this.updateData.bind(this);\n    this.categoryList = this.categoryList.bind(this);\n    this.aboutSplit = this.aboutSplit.bind(this);\n    this.listLink = this.listLink.bind(this);\n    this.homePage = this.homePage.bind(this)\n  }\n\n  homePage() {\n    this.setState = ({\n      home : !this.state.home\n    })\n  }\n\n  componentWillMount () {\n    var csvFilePath = require(\"./StudentProfiles.csv\")\n    var Papa = require(\"papaparse/papaparse.min.js\")\n    Papa.parse(csvFilePath, {\n      header: true,\n      download: true,\n      skipEmptyLines: true,\n      // Here this is also available. So we can call our custom class method\n      complete: this.updateData\n    });\n  }\n\n  updateData(result) {\n    const data = result.data;\n    this.setState({\n      aboutProject: data[0][\"About Project\"],\n      aboutPerson: data[0][\"About You (In Third Person)\"],\n      firstName: data[0][\"First Name\"],\n      lastName: data[0][\"Last Name\"],\n      Medium: data[0][\"Medium\"],\n      Tags: data[0][\"Tags\"],\n      projectLink: data[0][\"Project Documentation Link\"],\n      projectEmbed: data[0][\"Project Embed Video\"],\n      coverImg: data[0][\"Cover Image\"],\n      projectImage: data[0][\"Project Image 1 Link\"],\n      projectImage2: data[0][\"Project Image 2 Link\"],\n      promrojectImage3: data[0][\"Project Image 3 Link\"],\n      projectTitle: data[0][\"Project Title\"],\n      secondAdvisor: data[0][\"Sceondary Advisor\"],\n      thesisAdvisor: data[0][\"Thesis Advisor\"],\n      classAdvisor: data[0][\"Class Advisor\"],\n      links: [\n        {link: data[0][\"Portfolio link\"], text: \"Portfolio\"},\n        {link: data[0][\"Github\"], text: \"Github\"},\n        {link: data[0][\"Instagram\"], text: \"Instagram\"},\n        {link: data[0][\"Twitter\"], text: \"Twitter\"},\n        {link: data[0][\"Linkedin\"], text: \"Linkedin\"}\n      ]\n    })\n    // const links = [data[0][\"Github\"], data[0][\"Linkedin\"]]\n\n    console.log(data);\n  }\n\n  imgs(src, i) {\n    return (\n      <li key={i}\n        >\n        <img src={src}/>\n      </li>\n    )\n  }\n\n  categoryList(words, i) {\n    return (\n\t\t\t<div key={i}>\n\t\t\t\t  {words}\n\t\t    </div>\n\t\t)\n  }\n\n  aboutSplit(words, i) {\n    return (\n      <div key={i}>\n          {words}\n          <br/>\n        </div>\n    )\n  }\n\n  listLink(links, i) {\n    return (\n      links.link == \"\" ?\n      <a key={i}> </a> :\n      <span key={i}>\n        <a href={links.link}>{links.text}</a>\n        <span> | </span>\n      </span>\n    )\n  }\n\n  componentDidMount() {\n    // console.log(result);\n  }\n\n  renderProjectMap() {\n    return (\n      <div>\n        <h1>\n          List of projects\n        </h1>\n        <ul id=\"imageGal\">\n          <li>\n           <a href=\"projectVivacious.html\"><img src={this.state.coverImg} alt=\"\" /></a>\n           </li>\n           <li>\n            <img src={this.state.projectImage2} alt=\"\" />\n          </li>\n          </ul>\n      </div>\n    )\n  }\n\n  renderAnimal () {\n    return (\n      <div className=\"fullPage\">\n\n        <div className=\"header\">\n          <h1>\n            temp\n          </h1>\n          <a href=\"projectList.html\">\n            Click me\n          </a>\n        </div>\n\n        <main className=\"holyGrail-body\">\n          <article className=\"holyGrail-content\">\n          <h1>\n            {this.state.projectTitle}\n            <div className=\"content\">\n\n              {this.state.aboutProject.split(\"<br/>\").map(this.aboutSplit)}\n\n            </div>\n            <div className=\"content\">\n\n              <a href={this.state.projectLink != \"\" ? this.state.projectLink : this.state.ProjectLink}> Documentation link </a>\n\n            </div>\n          </h1>\n\n            <ul id=\"imageGal\">\n              <li>\n               <img src={this.state.projectImage} alt=\"\" />\n               </li>\n               <li>\n                <img src={this.state.projectImage2} alt=\"\" />\n              </li>\n              <li>\n                <img src={this.state.projectImag3} alt=\"\" />\n              </li>\n              <li className=\"videoWrapper\">\n                <iframe title=\"video\" src={this.state.projectEmbed} frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n              </li>\n            </ul>\n          </article>\n          <nav className=\"holyGrail-nav\">\n            <h1> {this.state.firstName} {this.state.lastName} </h1>\n            <div id=\"face\">\n              <img src={this.state.coverImg} alt=\"\" />\n            </div>\n            <ul>\n              {this.state.links.map(this.listLink)}\n\n            </ul>\n            {this.state.aboutPerson.split(\"<br/>\").map(this.aboutSplit)}\n\n          </nav>\n          <aside className=\"holyGrail-ads\">\n            <h1> Category </h1>\n            {this.state.Tags.split(',').map(this.categoryList)}\n          </aside>\n        </main>\n\n        <footer>\n          <h1> TBD </h1>\n        </footer>\n      </div>\n    )\n  }\n\n  render () {\n    return (\n      this.state.home ? this.renderProjectMap() : this.renderAnimal()\n    )\n  }\n}\n\nexport default Animalpage\n","import React, { Component } from 'react';\nimport Animalpage from \"./animalPage.js\"\n// import { CSVLink, CSVDownoad } from 'react-csv';\n// import profiles from './StudentProfiles.csv'\n\n\n\nclass ProjectMap extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      home: false\n    }\n    this.renderAnimal = this.renderAnimal.bind(this)\n    this.renderProjectMap = this.renderProjectMap.bind(this)\n    this.homePage = this.homePage.bind(this)\n  }\n\n  homePage() {\n    this.setState = ({\n      home : !this.state.home\n    })\n  }\n\n  renderAnimal() {\n    return (\n      <Animalpage> </Animalpage>\n    )\n  }\n\n  renderProjectMap() {\n    return (\n      <div>\n        <h1>\n          List of projects\n        </h1>\n        <ul id=\"imageGal\">\n          <li>\n           <img src={this.state.projectImage} alt=\"\" />\n           </li>\n           <li>\n            <img src={this.state.projectImage2} alt=\"\" />\n          </li>\n          <li>\n            <img src={this.state.projectImag3} alt=\"\" />\n          </li>\n          </ul>\n      </div>\n    )\n  }\n\n  render () {\n    return (\n      this.state.home ? this.renderProjectMap() : this.renderAnimal()\n    )\n  }\n\n}\n\nexport default ProjectMap\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { render } from 'react-snapshot';\nimport './index.scss';\nimport Animalpage from './animalPage.js';\nimport ProjectMap from './projectMap.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Animalpage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}